//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/InputStstem.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputStstem: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputStstem()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputStstem"",
    ""maps"": [
        {
            ""name"": ""Standart"",
            ""id"": ""1e942c37-f826-46ff-8c60-49f7a6cce205"",
            ""actions"": [
                {
                    ""name"": ""MousePos"",
                    ""type"": ""Value"",
                    ""id"": ""88e9dc86-8d84-49bd-8de3-66f912a6fc37"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""leftCkick"",
                    ""type"": ""Button"",
                    ""id"": ""5522e66f-3003-498a-9d73-158e01840a1b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""36120a68-5780-41b3-a701-f0e1d0124a02"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ea38a79c-dbac-4423-b486-31c74f2904d9"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";PC"",
                    ""action"": ""MousePos"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4dbdbb4b-0868-41d0-bb7d-391e6db9abe7"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";PC"",
                    ""action"": ""leftCkick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""b8cec10c-b70c-4ffd-bd74-5dd38093c3a2"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""93fdcfad-6b8d-45c0-80c6-40e604ffebce"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""b0f130b7-7b21-4c19-9aec-c07885199765"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""b4213789-32b4-46a5-b506-c6468b50c67e"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""961b9ee8-d51b-425c-aac9-d0f6953f034a"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PC"",
            ""bindingGroup"": ""PC"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Standart
        m_Standart = asset.FindActionMap("Standart", throwIfNotFound: true);
        m_Standart_MousePos = m_Standart.FindAction("MousePos", throwIfNotFound: true);
        m_Standart_leftCkick = m_Standart.FindAction("leftCkick", throwIfNotFound: true);
        m_Standart_Movement = m_Standart.FindAction("Movement", throwIfNotFound: true);
    }

    ~@InputStstem()
    {
        UnityEngine.Debug.Assert(!m_Standart.enabled, "This will cause a leak and performance issues, InputStstem.Standart.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Standart
    private readonly InputActionMap m_Standart;
    private List<IStandartActions> m_StandartActionsCallbackInterfaces = new List<IStandartActions>();
    private readonly InputAction m_Standart_MousePos;
    private readonly InputAction m_Standart_leftCkick;
    private readonly InputAction m_Standart_Movement;
    public struct StandartActions
    {
        private @InputStstem m_Wrapper;
        public StandartActions(@InputStstem wrapper) { m_Wrapper = wrapper; }
        public InputAction @MousePos => m_Wrapper.m_Standart_MousePos;
        public InputAction @leftCkick => m_Wrapper.m_Standart_leftCkick;
        public InputAction @Movement => m_Wrapper.m_Standart_Movement;
        public InputActionMap Get() { return m_Wrapper.m_Standart; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(StandartActions set) { return set.Get(); }
        public void AddCallbacks(IStandartActions instance)
        {
            if (instance == null || m_Wrapper.m_StandartActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_StandartActionsCallbackInterfaces.Add(instance);
            @MousePos.started += instance.OnMousePos;
            @MousePos.performed += instance.OnMousePos;
            @MousePos.canceled += instance.OnMousePos;
            @leftCkick.started += instance.OnLeftCkick;
            @leftCkick.performed += instance.OnLeftCkick;
            @leftCkick.canceled += instance.OnLeftCkick;
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
        }

        private void UnregisterCallbacks(IStandartActions instance)
        {
            @MousePos.started -= instance.OnMousePos;
            @MousePos.performed -= instance.OnMousePos;
            @MousePos.canceled -= instance.OnMousePos;
            @leftCkick.started -= instance.OnLeftCkick;
            @leftCkick.performed -= instance.OnLeftCkick;
            @leftCkick.canceled -= instance.OnLeftCkick;
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
        }

        public void RemoveCallbacks(IStandartActions instance)
        {
            if (m_Wrapper.m_StandartActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IStandartActions instance)
        {
            foreach (var item in m_Wrapper.m_StandartActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_StandartActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public StandartActions @Standart => new StandartActions(this);
    private int m_PCSchemeIndex = -1;
    public InputControlScheme PCScheme
    {
        get
        {
            if (m_PCSchemeIndex == -1) m_PCSchemeIndex = asset.FindControlSchemeIndex("PC");
            return asset.controlSchemes[m_PCSchemeIndex];
        }
    }
    public interface IStandartActions
    {
        void OnMousePos(InputAction.CallbackContext context);
        void OnLeftCkick(InputAction.CallbackContext context);
        void OnMovement(InputAction.CallbackContext context);
    }
}
